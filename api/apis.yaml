openapi: "3.0.1"
info:
  version: "0.0.2"
  title: "Rating APIs"
  description: "API interface for CORD SDK"
  termsOfService: "http://studio.dhiway.com/page/terms-and-conditions"
  contact:
    name: "Dhiway Networks"
    email: "info@dhiway.com"
    url: "https://dhiway.com"
  license:
    name: "Apache v2.0"
    url: "https://www.apache.org/licenses/LICENSE-2.0"
servers:
- url: "http://localhost:4000/"
  description: "Local server"
paths:
  /publish:
    post:
      tags:
      - "Rating API Server"
      description: "Publish the ratings to the chain, for the given transaction / message ID"
      operationId: "publishRatings"
      requestBody:
        description: "Write the ratings to the chain. Notice that this can take 1 or more entries from the NP (Network Participant) and submit it to the API (which inturn will write to the chain)."
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PublishRating"
        required: "true"
      responses:
        default:
          $ref: "#/components/schemas/DefaultResponse"

  /on_publish:
    post:
      tags:
      - "Rating API Client (NP)"
      description: "Inform the client about success or failure of the publish rating"
      operationId: "onPublishRating"
      requestBody:
        description: "Callback of publish rating operation to the chain. Considering the /publish call will have multiple entries, this can collate all the entries and send the response, upon completion."
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/OnPublishRating"
        required: "true"
      responses:
        default:
          $ref: "#/components/schemas/DefaultResponse"

  /revise:
    post:
      tags:
      - "Rating API Server"
      description: "Revise ratings in the chain. This can happen due to 2 reasons. 1 is when the user themself changes the given rating over the period (possible for seller to settle bad rating with the buyer), or some discrepancies are found during the auditing."
      operationId: "reviseRatings"
      requestBody:
        description: "revise the ratings"
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ReviseRating"
        required: "true"
      responses:
        default:
          $ref: "#/components/schemas/DefaultResponse"

  /on_revise:
    post:
      tags:
      - "Rating API Client (NP)"
      description: "Callback of the revise operation on the chain."
      operationId: "onReviseRating"
      requestBody:
        description: "update the ratings"
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/OnReviseRating"
        required: "true"
      responses:
        default:
          $ref: "#/components/schemas/DefaultResponse"

  /query:
    post:
      tags:
      - "Rating API Server"
      description: "Read aggregate score, read all given entities ratings, more details based on parameters"
      operationId: "Query"
      requestBody:
        description: "query the score"
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/QueryRating"
        required: "true"
      responses:
        default:
          $ref: "#/components/schemas/DefaultResponse"

  /on_query:
    post:
      tags:
      - "Rating API Client (NP)"
      description: "Response / Callback to the query call"
      operationId: "onQuery"
      requestBody:
        description: "query the ratings / score"
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/OnQueryRating"
        required: "true"
      responses:
        200:
          description: "Aggregated Score details"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/200_Res"
        400:
          description: "Invalid parameters"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
components:
  securitySchemes:
    bearerAuth:
      type: "http"
      scheme: "bearer"
      bearerFormat: "token"
  schemas:
    DefaultResponse:
      description: >-
        Acknowledgement of message received after successful validation of
        schema and signature
      content:
        application/json:
          schema:
            type: object
            properties:
              message:
                type: object
                properties:
                  ack:
                    allOf:
                      - $ref: '#/components/schemas/Ack'
                      - type: object
                      - properties:
                          status:
                            enum:
                              - ACK
                              - NACK
                required:
                  - ack
              error:
                $ref: '#/components/schemas/Error'
            required:
              - message
    200_Res:
      type: "object"
      properties:
        ack:
          $ref: "#/components/schemas/Ack"
    Ack:
      description: >-
        Describes the acknowledgement sent in response to an API call. If the
        implementation uses HTTP/S, then Ack must be returned in the same
        session. Every API call to a BPP must be responded to with an Ack
        whether the BPP intends to respond with a callback or not. This has one
        property called `status` that indicates the status of the
        Acknowledgement.
      type: object
      additionalProperties: false
      properties:
        status:
          type: string
          description: >-
            The status of the acknowledgement. If the request passes the
            validation criteria of the BPP, then this is set to ACK. If a BPP
            responds with status = `ACK` to a request, it is required to respond
            with a callback. If the request fails the validation criteria, then
            this is set to NACK. Additionally, if a BPP does not intend to
            respond with a callback even after the request meets the validation
            criteria, it should set this value to `NACK`.
          enum:
            - ACK
            - NACK
        tags:
          description: >-
            A list of tags containing any additional information sent along with
            the Acknowledgement.
          type: array
          items:
            $ref: '#/components/schemas/TagGroup'
    Descriptor:
      description: Physical description of something.
      type: object
      additionalProperties: false
      properties:
        name:
          type: string
        code:
          type: string
        short_desc:
          type: string
        long_desc:
          type: string
        additional_desc:
          type: object
          additionalProperties: false
          properties:
            url:
              type: string
            content_type:
              type: string
              enum:
                - text/plain
                - text/html
                - application/json
    Error:
      description: >-
        Describes an error object that is returned by a BAP, BPP or BG as a
        response or callback to an action by another network participant. This
        object is sent when any request received by a network participant is
        unacceptable. This object can be sent either during Ack or with the
        callback.
      type: object
      additionalProperties: false
      properties:
        code:
          type: string
          description: >-
            Standard error code. For full list of error codes, refer to
            docs/protocol-drafts/BECKN-005-ERROR-CODES-DRAFT-01.md of this repo"
        paths:
          type: string
          description: >-
            Path to json schema generating the error. Used only during json
            schema validation errors
        message:
          type: string
          description: >-
            Human readable message describing the error. Used mainly for
            logging. Not recommended to be shown to the user.
    Tag:
      description: >-
        Describes a tag. This is used to contain extended metadata. This object
        can be added as a property to any schema to describe extended
        attributes. For BAPs, tags can be sent during search to optimize and
        filter search results. BPPs can use tags to index their catalog to allow
        better search functionality. Tags are sent by the BPP as part of the
        catalog response in the `on_search` callback. Tags are also meant for
        display purposes. Upon receiving a tag, BAPs are meant to render them as
        name-value pairs. This is particularly useful when rendering tabular
        information about a product or service.
      type: object
      additionalProperties: false
      properties:
        descriptor:
          description: Description of the Tag, can be used to store detailed information.
          allOf:
            - $ref: '#/components/schemas/Descriptor'
        value:
          description: >-
            The value of the tag. This set by the BPP and rendered as-is by the
            BAP.
          type: string
        display:
          description: >-
            This value indicates if the tag is intended for display purposes. If
            set to `true`, then this tag must be displayed. If it is set to
            `false`, it should not be displayed. This value can override the
            group display value.
          type: boolean
    TagGroup:
      description: >-
        A collection of tag objects with group level attributes. For detailed
        documentation on the Tags and Tag Groups schema go to
        https://github.com/beckn/protocol-specifications/discussions/316
      type: object
      additionalProperties: false
      properties:
        display:
          description: >-
            Indicates the display properties of the tag group. If display is set
            to false, then the group will not be displayed. If it is set to
            true, it should be displayed. However, group-level display
            properties can be overridden by individual tag-level display
            property. As this schema is purely for catalog display purposes, it
            is not recommended to send this value during search.
          type: boolean
          default: true
        descriptor:
          description: >-
            Description of the TagGroup, can be used to store detailed
            information.
          allOf:
            - $ref: '#/components/schemas/Descriptor'
        list:
          description: >-
            An array of Tag objects listed under this group. This property can
            be set by BAPs during search to narrow the `search` and achieve more
            relevant results. When received during `on_search`, BAPs must render
            this list under the heading described by the `name` property of this
            schema.
          type: array
          items:
            $ref: '#/components/schemas/Tag'

    OnPublishResult_20x:
      type: "object"
      properties:
        status:
          type: "boolean"
          example: "true"
        did:
          type: "string"
          example: "did:cord:3vYxCfRTWVJM8WYP39KFs2FMtpfBTmSjMexRnqeLbf5dmVQF"
        message_id:
          type: "string"
        referenceId:
          type: "string"
          example: "rating:cord:r35tLfL1ouJhXLGqnGM4rK9hCM5RQrpjNN47KZ8cEBQbdoKtn"

    PublishRating:
      type: "object"
      properties:
        context:
          $ref: "#/components/schemas/Context"
        message:
          $ref: "#/components/schemas/PublishMessage"
    OnPublishRating:
      type: "object"
      properties:
        context:
          $ref: "#/components/schemas/Context"
        message:
          $ref: "#/components/schemas/OnPublishResult_20x"
    OnReviseResult_20x:
      type: "object"
      properties:
        status:
          type: "boolean"
          example: "true"
        did:
          type: "string"
          example: "did:cord:3vYxCfRTWVJM8WYP39KFs2FMtpfBTmSjMexRnqeLbf5dmVQF"
        message_id:
          type: "string"
        rating_identifier:
          type: "string"
          example: "rating:cord:r35tLfL1ouJhXLGqnGM4rK9hCM5RQrpjNN47KZ8cEBQbdoKtn"
    ReviseRating:
      type: "object"
      properties:
        context:
          $ref: "#/components/schemas/Context"
        message:
          $ref: "#/components/schemas/ReviseMessage"
    OnReviseRating:
      type: "object"
      properties:
        context:
          $ref: "#/components/schemas/Context"
        message:
          $ref: "#/components/schemas/OnReviseResult_20x"

    QueryRating:
      type: "object"
      properties:
        context:
          $ref: "#/components/schemas/Context"
        message:
          $ref: "#/components/schemas/QueryMessage"
    QueryMessage:
      type: "object"
      properties:
        entity_list:
          type: "array"
          items:
            type: "object"
            properties:
              entityUid:
                type: "string"
                example: "286cf1b1-3e16-448f-b675-3b232e82174d"
              ratingType:
                type: "string"
                example: "Overall"
              entityType:
                type: "string"
                example: "Retail"
    OnQueryRating:
      type: "object"
      properties:
        context:
          $ref: "#/components/schemas/Context"
        message:
          type: "object"
          properties:
            scores:
              type: "array"
              items:
                type: "object"
                properties:
                  entityUid:
                    type: "string"
                    example: "286cf1b1-3e16-448f-b675-3b232e82174d"
                  entityName:
                    type: "string"
                  score:
                    type: "number"
                    example: 3.70
                  totalRating:
                    type: "number"
                    example: 280
                  countOfTxn:
                    type: "number"
                    example: 73

    Context:
      type: "object"
      properties:
        domain:
          type: "string"
          example: "seller-rating"
        action:
          type: "string"
          example: "/on_publish"
        version:
          type: "string"
          example: "0.0.1"
        provider_uid:
          type: "string"
          example: "446c67bd-9aa7-4aef-8d62-c69e3a669ce0"
        provider_id:
          type: "string"
          example: "All in One - Market Place"
        confidex_did:
          type: "string"
          example: "did:cord:3vYxCfRTWVJM8WYP39KFs2FMtpfBTmSjMexRnqeLbf5dmVQF"
        registry_id:
          type: "string"
          example: "Confidex - Rating Provider Registry's ID"
        transaction_id:
          description: "The transaction ID to be kept same across revisions"
          type: "string"
        message_id:
          description: "The message ID is unique to every call, and should be used to match the callback"
          type: "string"
        timestamp:
          type: "string"
          example: "2021-06-29T10:52:01.620Z"
        key:
          type: "string"
        ttl:
          type: "string"
        location:
          type: "object"
          example: "currently empty, but can be used in future for different contexts of network"
    PublishMessage:
      type: "object"
      properties:
        rating:
          description: "List of entity ratings"
          type: "array"
          items:
            $ref: "#/components/schemas/PublishEntry"
    ReviseMessage:
      type: "object"
      properties:
        rating:
          description: "List of entity rating to be revised"
          type: "array"
          items:
            $ref: "#/components/schemas/ReviseEntry"
        referenceId:
          type: "string"
          example: "rating:cord:r35tLfL1ouJhXLGqnGM4rK9hCM5RQrpjNN47KZ8cEBQbdoKtn"
    PublishEntry:
      type: "object"
      properties:
        entity_uid:
          type: "string"
          example: "226c67bd-9aa7-4aef-8d62-c69e3a669ce0"
        entity_id:
          type: "string"
          example: "Gupta Kirana Store"
        entityType:
          type: "string"
          example: "Retail"
        ratingType:
          type: "string"
          example: "Overall"
        countOfTxn:
          type: "number"
          example: "100"
        totalRating:
          type: "number"
          example: "320"
    ReviseEntry:
      type: "object"
      properties:
        entityType:
          type: "string"
          example: "Retail"
        ratingType:
          type: "string"
          example: "Overall"
        countOfTxn:
          type: "number"
          example: "80"
        totalRating:
          type: "number"
          example: "280"
